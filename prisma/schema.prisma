datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Task {
  task_id    Int      @id @default(autoincrement())
  content    String
  due_date   DateTime
  status     Status
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  creatorId  Int
  assigneeId Int
  projectId  Int

  creator   User     @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee  User     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
}

enum Status {
  TO_DO
  IN_PROGRESS
  COMPLETED
}

model TaskOrder {
  id            Int      @id @default(autoincrement())
  projectId     Int      @unique
  to_do_ids      Int[]
  in_progress_ids  Int[]
  completed_ids Int[]

  project       Project  @relation(fields: [projectId], references: [id])
}

model Document {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  type      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model User {
  id               Int        @id @default(autoincrement())
  first_name       String     
  last_name        String     
  email            String     @unique
  password         String
  documents        Document[]
  tasksCreated     Task[]     @relation("TaskCreator")
  tasksAssigned    Task[]     @relation("TaskAssignee")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  createdTeams     Team[]     @relation("CreatedTeams")
  teams            TeamMember[]
  createdProjects  Project[]  @relation("CreatedProjects")
  projects         ProjectMember[]

  @@map("users") // Optional: Specify custom table name if needed
}

model Message {
  id        Int        @id @default(autoincrement())
  text      String     @map("message_text")
  sender    User       @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User       @relation("ReceivedMessages", fields: [receiverId], references: [id])
  senderId  Int
  receiverId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  @@map("messages") // Optional: Specify custom table name if needed
}

model Team {
  id          Int           @id @default(autoincrement())
  title       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  creatorId   Int
  creator     User          @relation("CreatedTeams", fields: [creatorId], references: [id])
  members     TeamMember[]
  projects    Project[]

  @@map("teams") // Optional: Specify custom table name if needed
}

model TeamMember {
  teamId   Int
  userId   Int
  team     Team   @relation(fields: [teamId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@id([teamId, userId]) // Composite primary key
}

model Project {
  id          Int           @id @default(autoincrement())
  title       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  creatorId   Int
  teamId      Int

  creator     User          @relation("CreatedProjects", fields: [creatorId], references: [id])
  team        Team          @relation(fields: [teamId], references: [id])
  tasks       Task[]
  taskOrder   TaskOrder?
  members     ProjectMember[]

  @@map("projects") // Optional: Specify custom table name if needed
}

model ProjectMember {
  projectId Int
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId]) // Composite primary key
}
